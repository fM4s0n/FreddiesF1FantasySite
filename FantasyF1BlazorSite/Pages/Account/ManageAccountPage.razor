@page "/Account/Manage"

@using DataAccess.Services
@using DataAccess.API
@using DataAccess.Database
@using DataAccess.Models
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json
@using DataAccess.Dictionaries
@using DataAccess.Models.General

@inject AppStateService appState
@inject IUserData userData;

<h1 style="text-align: center">Account management</h1>
<br />

@if (appState.isLoggedIn)
{
    <label>Please re-enter you password</label>
    <input type="password" @bind="passwordInitialCheck"/>
    <button type="button" @onclick="CheckInitialPassword">Next</button>

    @if (user is not null)
    {
        <form id="manage-account">

            <label for="accountNumber">Account number:</label>
            <label id="accountNumber">@user.UserId</label>
            <br /><br>

            <label>Account level</label>
            <select id="manageAccountAccountlevel" class="manage-account-input" @bind="user.UserLevel">
                <option selected="@user.UserLevel">Standard</option>

                <option selected="@user.UserLevel">Pro</option>
                @if (user.UserLevel == UserLevels.Administrator)
                {
                    <option selected="@user.UserLevel">Administrator</option>
                }
            </select>
            <br /><br />

            <label for="accountUsername">Username:</label><br />
            <input type="text" id="accountUsername" class="manage-account-input" @bind="user.Username" />
            <br /><br />

            <label for="accountPassword">Password</label><br />
            <input type="password" id="accountPassword" class="manage-account-input" @bind="passwordInputText" />
            <button type="button" @onclick="PasswordEditButtonToggle">Edit</button>
            <br /><br />

            <label for="accountFullName">Full name:</label><br />
            <input type="text" id="accountFullName" class="manage-account-input" @bind="user.FullName" />
            <br /><br />

            <label for="selectFavDriver">Favourite Driver</label><br />
            <select id="selectFavDriver" class="manage-account-input" @bind="user.FavouriteDriverName">
                <option>---Select driver---</option>
                @if (drivers is not null)
                {
                    @foreach (var driver in drivers.MRData.StandingsTable.StandingsLists[0].DriverStandings)
                    {
                        <option value="@driver.Driver.FullName" selected="@(driver.Driver.FullName == user.FavouriteDriverName)">@driver.Driver.FullName</option>
                    }
                }
            </select>
            <br /><br />

            <label for="selectFavConstructor">Favourite Constructor</label><br />
            <select id="selectFavConstructor" class="manage-account-input" @bind="user.FavouriteConstructorName">
                <option>---Select constructor---</option>
                @if (constructors is not null)
                {
                    @foreach (var constructor in constructors.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
                    {
                        <option value="@constructor.Constructor.Name" selected="@(constructor.Constructor.Name == user.FavouriteConstructorName)">@constructor.Constructor.Name</option>
                    }
                }
            </select>
            <br /><br />

            <button type="submit" style="width:20%; float:right" @onclick="UpdateAccount">Save</button>
        </form>
    }
    else
    {
        <a>Loading...</a>
    }
}


@code {
    PasswordHasher<UserModel> passwordHasher = new();
    DriverStandingsModel.Root? drivers;
    ConstructorStandingsModel.Root? constructors;
    UserModel user = new();
    string passwordInputText = "";
    string passwordEditCancelButtonText = "Edit";
    string passwordInitialCheck = "";
    bool? userVerified = null;

    protected override async Task OnInitializedAsync ()
    {
        user = appState.currentUser;

        var driverJson = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        drivers = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(driverJson);

        var constructorJson = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        constructors = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(constructorJson);
    }

    private void PasswordEditButtonToggle()
    {
        if(passwordEditCancelButtonText == "Edit")
            passwordEditCancelButtonText = "Cancel";
        else        
            passwordEditCancelButtonText = "Edit";        
    }

    private string HashPassword(string unhashedPassword)
    {
        return passwordHasher.HashPassword(user, unhashedPassword);
    }

    private PasswordVerificationResult VerifyPassword (string hashedPassword, string unhashedPassword)
    {
        return passwordHasher.VerifyHashedPassword(user, hashedPassword, unhashedPassword);
    }

    private void CheckInitialPassword()
    {
        string initialHashedPassword = HashPassword(passwordInitialCheck);
        if(VerifyPassword(initialHashedPassword, passwordInitialCheck) == PasswordVerificationResult.Success)        
            userVerified = true;        
        else        
            userVerified = false;        
    }

    private void GetApiIds()
    {
        user.FavouriteDriverId = DriverIdDictionary.GetDriverId(user.FavouriteDriverName);
        user.FavouriteConstructorId = ConstructorIdDictionary.GetConstructorID(user.FavouriteConstructorName);
    }

    private async void UpdateAccount ()
    {
        GetApiIds();
        user.Password = HashPassword();
        await userData.UpdateUserDetails(user);
        
        //refresh user info on page
    }
}

@page "/Account/Create"

@using DataAccess.Services
@using DataAccess.API
@using DataAccess.Database
@using DataAccess.Models
@using Newtonsoft.Json
@using DataAccess.Dictionaries;
@using DataAccess.Models.General;

@inject ApiService API
@inject IUserData userData
@inject AppStateService appState
@inject DriverIdDictionary driverIds
@inject ConstructorIdDictionary constructorIds

<h1 style="text-align: center">Create account</h1>

<form id="create-account">
    <div>
        <label for="accountFullName">Full name:</label>
        <input type="text" id="accountFullName" class="create-account-input" @bind="user.FullName" />
        <br /><br />

        <label for="accountUsername">Username:</label>
        <input type="text" id="accountUsername" class="create-account-input" @bind="user.Username" />
        <br /><br />

        <label for="accountPassword">Password</label>
        <input type="password" id="accountPassword" class="create-account-input" @bind="user.Password" />
        <br /><br />

        <label for="selectFavDriver">Favourite Driver</label>
        <select id="selectFavDriver" class="create-account-input" @bind="@user.FavouriteDriverName">
            <option>---Select driver---</option>

            @if (drivers is not null)
            {
                @foreach (var driver in drivers.MRData.StandingsTable.StandingsLists[0].DriverStandings)
                {
                    <option value="@driver.Driver.FullName">@driver.Driver.FullName</option>
                }
            }
        </select> <br /><br />

        <label for="selectFavConstructor">Favourite Constructor</label>
        <select id="selectFavConstructor" class="create-account-input" @bind="@user.FavouriteConstructorName">
            <option>---Select constructor---</option>

            @if (constructors is not null)
            {
                @foreach (var constructor in constructors.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
                {
                    <option value="@constructor.Constructor.Name">@constructor.Constructor.Name</option>
                }
            }
        </select><br /><br />
        <button type="submit" style="width:20%; float:right" @onclick="CheckUsernameIsUnique">Save</button>
    </div>
</form>

@code {
    DriverStandingsModel.Root drivers;
    ConstructorStandingsModel.Root constructors;
    UserModel user = new();
    bool usernameTaken = false;

    protected override async Task OnInitializedAsync ()
    {
        var driverJson = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        drivers = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(driverJson);

        var constructorJson = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        constructors = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(constructorJson);
    }

    private void GetApiIds()
    {
        user.FavouriteDriverId = DriverIdDictionary.GetDriverId(user.FavouriteDriverName);
        user.FavouriteConstructorId = ConstructorIdDictionary.GetConstructorID(user.FavouriteConstructorName);
    }

    private async void CheckUsernameIsUnique()
    {
        List<UserModel> users = new();
        users = await userData.GetAllUsers();
        foreach(var item in users)
        {
            if (item.Username == user.Username)
            {
                usernameTaken = true;
                break;
            }
            else
                await CreateNewUser();
        }
    }

    private async Task CreateNewUser()
    {
        GetApiIds();

        user.UserId = Guid.NewGuid().ToString();

        await userData.InsertUser(user);

        //display success message then ask user to login

        //return to login page
    }
}
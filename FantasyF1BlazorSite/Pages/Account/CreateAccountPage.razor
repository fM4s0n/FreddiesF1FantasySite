@page "/Account/Create"

@using DataAccess.Services
@using DataAccess.API
@using DataAccess.Database
@using DataAccess.Models
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json
@using DataAccess.Dictionaries;
@using DataAccess.Models.General;

@inject IUserData userData
@inject AppStateService appState

@if(setupDone)
{
    <h1 style="text-align: center">Create account</h1>

    <form id="create-account">
        <label for="accountFullName">Full name:</label>
        <input type="text" id="accountFullName" class="create-account-input" @bind="user.FullName" />
        <br /><br />

        <label for="accountUsername">Username:</label>
        <input type="text" id="accountUsername" class="create-account-input" @bind="user.Username" />
        <br /><br />

        <label for="accountPassword">Password</label>
        <input type="password" id="accountPassword" class="create-account-input" @bind="passwordInputText" />
        <br /><br />

        <label for="selectFavDriver">Favourite Driver</label>
        <select id="selectFavDriver" class="create-account-input" @bind="@user.FavouriteDriverId">
            <option>---Select driver---</option>

            @if(drivers is not null)
            {
                @foreach(var driver in drivers.MRData.StandingsTable.StandingsLists[0].DriverStandings)
                {
                    <option value="@driver.Driver.DriverId">@driver.Driver.FullName</option>
                }
            }
        </select> <br /><br />

        <label for="selectFavConstructor">Favourite Constructor</label>
        <select id="selectFavConstructor" class="create-account-input" @bind="@user.FavouriteConstructorId">
            <option>---Select constructor---</option>

            @if(constructors is not null)
            {
                @foreach(var constructor in constructors.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
                {
                    <option value="@constructor.Constructor.ConstructorId">@constructor.Constructor.Name</option>
                }
            }
        </select><br /><br />
        <button type="submit" style="width:20%; float:right" @onclick="CheckUsernameIsUnique">Save</button>
    </form>
}



@code {
    public PasswordHasher<UserModel> passwordHasher = new();
    DriverStandingsModel.Root drivers = new();
    ConstructorStandingsModel.Root constructors = new();
    UserModel user = new();
    bool usernameTaken = false;
    string passwordInputText = "";
    bool setupDone = false;

    protected override async Task OnInitializedAsync ()
    {
        var driverJson = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        drivers = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(driverJson);

        var constructorJson = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        constructors = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(constructorJson);

        setupDone = true;
    }

    private async void CheckUsernameIsUnique()
    {
        List<UserModel> users = new();
        users = await userData.GetAllUsers();

        if (users.Count > 0)
        {
            foreach (var item in users)
            {
                if (item.Username == user.Username)
                {
                    usernameTaken = true;
                    break;
                }
                else
                    await CreateNewUser();
            }
        }
        else
            await CreateNewUser();
    }

    private async Task CreateNewUser()
    {
        user.UserId = Guid.NewGuid().ToString();

        user.Password = HashPassword();
        user.UserLevel = UserLevels.Standard;

        await userData.InsertUser(user);

        //display success message then ask user to login

        //return to login page
    }

    private string HashPassword()
    {
        return passwordHasher.HashPassword(user, passwordInputText);
    }
}
@page "/Fantasy/CreateTeam"

@using DataAccess.Models.Fantasy
@using DataAccess.Dictionaries.Fantasy
@using DataAccess.Models
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Models.General;
@using DataAccess.Services
@using Newtonsoft.Json

@inject ITeamData teamData
@inject IDriverTeamMembershipData dtmData
@inject IConstructorTeamMembershipData ctmData
@inject AppStateService appState
@inject NavigationManager navMan

<head>
    <title>Create team</title>
</head>

@if(appState.isLoggedIn)
{
    <h3>Create a new Fantasy Team</h3>

    if(setUpdone)
    {
        <form id="create-team">
            <label>Team name</label>
            <input type="text" class="create-team-imput" @bind="newTeam.Name" />
            <br />  <br />

            <label for="selectConstructor">Select Constructor</label>
            <select id="selectConstructor" @onchange="@((args) => HandleSelectChanged(args, 0))">
                <option disabled selected value="0">-----------------------------------</option>
                @foreach(var c in availableConstructrors)
                {
                    <option value="@c.ConstructorId">@(c.ConstructorName) - £@(c.CurrentValue.ToString("F"))m </option>
                }
            </select>
            <br/>


            @*@for(int i = 0; i < 4; i++)
            {
                <label for="selectDriver1">Select Driver @(i+1)</label>
                <select id="selectDriver1" @onchange="@((args) => HandleSelectChanged(args, i+1))">
                <option disabled selected value="0">---------------</option>
                    @foreach(var d in availableDrivers1)
                    {                
                        <option value="@d.DriverId">@d.DriverName - £@(d.CurrentValue)m</option>
                    }
                </select>
                <br />
            }*@

            <label for="selectDriver1">Select Driver 1</label>
            <select id="selectDriver1" @onchange="@((args) => HandleSelectChanged(args, 1))">
                <option disabled value="0" selected="@(newTeam.Drivers[0].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers1)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[0].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver2">Select Driver 2</label>
            <select id="selectDriver2" @onchange="@((args) => HandleSelectChanged(args, 2))">
                <option disabled value="0" selected="@(newTeam.Drivers[1].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers2)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[1].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 3</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 3))">
                <option disabled value="0" selected="@(newTeam.Drivers[2].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers3)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[2].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 4</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 4))">
                <option disabled value="0" selected="@(newTeam.Drivers[3].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers4)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[3].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriverBoost">Select Driver to boost</label>
            <select id="selectDriverBoost" @onchange="@((args) => HandleSelectChanged(args, 5))">
                <option disabled value="0" selected="@(newTeam.BoostedDriverId == "")">-----------------------------------</option>
                @foreach(var d in availableDriversToBoost)
                {
                    <option value="@d.DriverId" selected="@(newTeam.BoostedDriverId == d.DriverId)">@d.DriverName</option>
                }
            </select>
            <br /> <br />


            <p class="@SetBudgetTextColourClass">Team Value: £@(newTeam.CurrentTeamValue.ToString("F"))m</p>
            <p>Budget remaining: £@(newTeam.BudgetRemaining.ToString("F"))m</p> <br />

            <button type="submit" disabled="@(!allChecksPass)" @onclick="OnSubmit">Create Team</button>

            @if(nameTaken)
            {
                <p>name already taken</p>
            }
        </form>
    }
}


@code {
    private string ColourCode { get; set; } = "";

    FantasyTeamModel newTeam = new();
    List<FantasyTeamModel> usersOwnedTeams = new();
    bool nameTaken = false;
    bool setUpdone = false;
    bool allChecksPass = false;

    //lists of drivers and constructors to choose from
    List<ConstructorTeamMembershipModel> availableConstructrors = new();
    List<DriverTeamMembershipModel> availableDrivers1 = new();
    List<DriverTeamMembershipModel> availableDrivers2 = new();
    List<DriverTeamMembershipModel> availableDrivers3 = new();
    List<DriverTeamMembershipModel> availableDrivers4 = new();

    //List of drivers that are available to boost- i.e only ones selected in the team
    List<DriverTeamMembershipModel> availableDriversToBoost = new();

    //List<List<DriverTeamMembershipModel>> availableDriverLists = new();    

    protected override async Task OnInitializedAsync()
    {
        usersOwnedTeams = await teamData.GetAllTeams();

        foreach(var t in usersOwnedTeams)
        {
            if(t.OwnerId != appState.currentUser.UserId)
                usersOwnedTeams.Remove(t);
        }

        //get list of constructors to pick from
        await GetConstructors();

        await GetDrivers();

        //add 4 empty drivers to the team so we can insert a driver
        for(int i = 0; i < 4; i++)        
            newTeam.Drivers.Add(new DriverTeamMembershipModel(){ DriverId ="0" });

        newTeam.Constructors.Add(new ConstructorTeamMembershipModel());

        for (int i = 0; i < 4; i++)
            availableDriversToBoost.Add(new DriverTeamMembershipModel() { DriverId = "0" });

        setUpdone = true;
    }

    private async Task GetConstructors()
    {
        var json = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        ConstructorStandingsModel.Root deserialised = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(json);
        foreach (ConstructorStandingsModel.ConstructorStanding c in deserialised.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
        {
            ConstructorTeamMembershipModel con = new();
            con.ConstructorId = c.Constructor.ConstructorId;

            availableConstructrors.Add(con);
        }
        availableConstructrors = availableConstructrors.OrderByDescending(t => t.CurrentValue).ToList();
    }

    private async Task GetDrivers()
    {
        var json = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        DriverStandingsModel.Root deserialised = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(json);
        foreach(DriverStandingsModel.DriverStandings d in deserialised.MRData.StandingsTable.StandingsLists[0].DriverStandings)
        {
            DriverTeamMembershipModel dri = new();
            dri.DriverId = d.Driver.DriverId;

            availableDrivers1.Add(dri);
            availableDrivers2.Add(dri);
            availableDrivers3.Add(dri);
            availableDrivers4.Add(dri);           
        }
        //order lists by driver value
        availableDrivers1 = availableDrivers1.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers2 = availableDrivers2.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers3 = availableDrivers3.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers4 = availableDrivers4.OrderByDescending(t => t.CurrentValue).ToList();
    }

    /// <summary>
    /// When on changed is invoked, set the selected driver and refresh the lists 
    /// </summary>
    /// <param name="args">value of the select item that has been changed</param>
    /// <param name="selectNumber">select item changed by the user</param>
    /// <returns></returns>
    private async Task HandleSelectChanged(ChangeEventArgs args, int selectNumber)
    {
        if(args.Value is not null)
        {
            //if constructor select box selected
            if(selectNumber == 0)            
                newTeam.Constructors[0].ConstructorId = args.Value.ToString();
            else if(selectNumber > 0 && selectNumber < 5)
            {   //depending on the select box chosen, remove the selected driver from each of the other boxes so they can't be selected again              
                if(selectNumber == 1)
                {
                    //if a driver is already in the slot we are about to put one in, we need to add that driveer back into the other lists
                    if(newTeam.Drivers[0].DriverId != "0")
                    {
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                    }

                    //remove from all lists except the one the driver has just been selected in
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 2)
                {
                    if(newTeam.Drivers[1].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 3)
                {
                    if(newTeam.Drivers[2].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 4)
                {
                    if(newTeam.Drivers[3].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                }
                //add the selected driver to the team in the relevent index
                newTeam.Drivers[selectNumber - 1].DriverId = args.Value.ToString();
                //add the selected driver to the available drivers to boost
                availableDriversToBoost[selectNumber - 1].DriverId = (args.Value.ToString());

                //re order the lists by value
                availableDrivers1 = availableDrivers1.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers2 = availableDrivers2.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers3 = availableDrivers3.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers4 = availableDrivers4.OrderByDescending(t => t.CurrentValue).ToList();
            }
            else
            {
                //if 5 is selected, they are updating their boosted driver
                if(selectNumber == 5)
                {
                    newTeam.BoostedDriverId = args.Value.ToString();
                }
            }
            //calc budget remaining
            newTeam.BudgetRemaining = 100 - newTeam.CurrentTeamValue;

            CheckInputs();
        }
    }

    public async void OnSubmit()
    {
        //set up data about team
        newTeam.TeamId = Guid.NewGuid().ToString();
        newTeam.OwnerId = appState.currentUser.UserId;
        newTeam.CreatedDate = DateTime.Now;

        //insert the team into the db
        await teamData.InsertTeam(newTeam);

        //insert constructor team membership(s) into db
        foreach(ConstructorTeamMembershipModel ctm in newTeam.Constructors)
        {
            ctm.ConstructorTeamMembershipId = Guid.NewGuid().ToString();
            ctm.TeamId = newTeam.TeamId;
            ctm.CurrentlySelected = true;
            ctm.PurchasedValue = ctm.CurrentValue;

            await ctmData.InsertConstructorTeamMembership(newTeam.Constructors[0]);
        }

        //insert driver team meberships into db
        foreach(DriverTeamMembershipModel dtm in newTeam.Drivers)
        {
            dtm.DriverTeamMembershipId = Guid.NewGuid().ToString();
            dtm.TeamId = newTeam.TeamId;
            dtm.CurrentlySelected = true;
            dtm.PurchasedValue = dtm.CurrentValue;
            if (dtm.DriverId == newTeam.BoostedDriverId)
                dtm.CurrentlyBoosted = true;
            else
                dtm.CurrentlyBoosted = false;
            
            await dtmData.InsertDriverTeamMembership(dtm);
        }

        //navigate to manage team
        navMan.NavigateTo($"/Fantasy/ManageTeam{newTeam.TeamId}", false);
    }

    private void CheckInputs()
    {
        if(newTeam.Name != "" && newTeam.CurrentTeamValue <= 100 && newTeam.Constructors.All(t => t.ConstructorId != "0") && newTeam.Drivers.All(t => t.DriverId != "0") && usersOwnedTeams.All(r => r.Name != newTeam.Name))
        {
            allChecksPass = true;
        }
    }

    private void SetBudgetTextColourClass()
    {
        if(newTeam.CurrentTeamValue < 100)
        {
            ColourCode = "black-Text-Class";
        }

        if(newTeam.CurrentTeamValue == 100)
        {
            ColourCode = "green-Text-Class";
        }

        if(newTeam.CurrentTeamValue > 100)
        {
            ColourCode = "red-Text-Class";
        }
    }
}

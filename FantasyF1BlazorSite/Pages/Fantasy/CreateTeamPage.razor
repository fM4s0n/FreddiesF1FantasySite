@page "/Fantasy/CreateTeam"

@using DataAccess.Models.Fantasy
@using DataAccess.Dictionaries.Fantasy
@using DataAccess.Models
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Models.General;
@using DataAccess.Services
@using Newtonsoft.Json

@inject ITeamData teamData
@inject AppStateService appState
@inject NavigationManager navMan

<head>
    <title>Create team</title>
</head>

@if(appState.isLoggedIn)
{
    <h3>Create a new Fantasy Team</h3>

    if(setUpdone)
    {
        <form id="create-team">
            <label>Team name</label>
            <input type="text" class="create-team-imput" @bind="newTeam.Name" />
            <br />  <br />

            <label for="selectConstructor">Select Constructor</label>
            <select id="selectConstructor" @onchange="@((args) => HandleSelectChanged(args, 0))">
                <option disabled selected value="0">------------</option>
                @foreach(var c in availableConstructrors)
                {
                    <option value="@c.ConstructorId">@c.ConstructorName</option>
                }
            </select>
            <br/>

            <label for="selectDriver1">Select Driver 1</label>
            <select id="selectDriver1" @onchange="@((args) => HandleSelectChanged(args, 1))">
                <option disabled selected value="0">------------</option>
                @foreach(var d in availableDrivers)
                {                
                    <option value="@d.DriverId">@d.DriverName</option>
                }
            </select>
            <br />

            <label for="selectDriver2">Select Driver 2</label>
            <select id="selectDriver2" @onchange="@((args) => HandleSelectChanged(args, 2))">
                <option disabled selected value="0">------------</option>
                @foreach(var d in availableDrivers)
                {
                    <option value="@d.DriverId">@d.DriverName</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 3</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 3))">
                <option disabled selected value="0">------------</option>
                @foreach(var d in availableDrivers.Where(t => t.DriverId != newTeam.Drivers[0].DriverId && t.DriverId != newTeam.Drivers[1].DriverId))
                {
                    <option value="@d.DriverId">@d.DriverName</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 4</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 4))">
                <option disabled selected value="0">------------</option>
                @foreach(var d in availableDrivers.Where(t => t.DriverId != newTeam.Drivers[0].DriverId && t.DriverId != newTeam.Drivers[1].DriverId))
                {
                    <option value="@d.DriverId">@d.DriverName</option>
                }
            </select>
            <br />


            <p>Team Value: @(newTeam.CurrentTeamValue)</p>
            <p>Budget remaining: @newTeam.BudgetRemaining</p>

            <button type="submit" @onclick="OnSubmit">Create Team</button>
            @if(nameTaken)
            {
                <p>name already taken</p>
            }
        </form>
    }
}


@code {
    FantasyTeamModel newTeam = new();
    List<FantasyTeamModel> usersOwnedTeams = new();
    bool nameTaken = false;
    bool setUpdone = false;

    //lists of drivers and constructors to choose from
    List<ConstructorTeamMembershipModel> availableConstructrors = new();
    List<DriverTeamMembershipModel> availableDrivers = new();


    protected override async Task OnInitializedAsync()
    {
        //get list of constructors to pick from
        await GetConstructors();

        await GetDrivers();

        for(int i=0;i<4;i++)        
            newTeam.Drivers.Add(new DriverTeamMembershipModel());

        newTeam.Constructors.Add(new ConstructorTeamMembershipModel());

        setUpdone = true;
    }

    private async Task GetConstructors()
    {
        var json = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        ConstructorStandingsModel.Root deserialised = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(json);
        @foreach (ConstructorStandingsModel.ConstructorStanding c in deserialised.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
        {
            ConstructorTeamMembershipModel con = new();
            con.ConstructorId = c.Constructor.ConstructorId;

            availableConstructrors.Add(con);
        }
    }

    private async Task GetDrivers()
    {
        var json = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        DriverStandingsModel.Root deserialised = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(json);
        @foreach(DriverStandingsModel.DriverStandings d in deserialised.MRData.StandingsTable.StandingsLists[0].DriverStandings)
        {
            DriverTeamMembershipModel dri = new();
            dri.DriverId = d.Driver.DriverId;

            availableDrivers.Add(dri);
        }
    }

    /// <summary>
    /// When on changed is invoked, set the selected driver and refresh the lists 
    /// </summary>
    /// <param name="args">value of the select item that has been changed</param>
    /// <param name="selectNumber">select item changed by the user</param>
    /// <returns></returns>
    private async Task HandleSelectChanged(ChangeEventArgs args, int selectNumber)
    {
        if(args is not null)
        {

            if(selectNumber == 0)            
                newTeam.Constructors[0].ConstructorId = args.Value.ToString();

            else            
                newTeam.Drivers[selectNumber - 1].DriverId = args.Value.ToString();

            availableDrivers.Remove((DriverTeamMembershipModel)args.Value);

            //await RefreshAvailableLists();            
        }
    }

    private async Task RefreshAvailableLists()
    {
        //await GetDrivers();
        foreach(var d in availableDrivers.ToList())        
            foreach(var driver in newTeam.Drivers)
                if(driver.DriverId == d.DriverId)
                    availableDrivers.Remove(d);


        //await GetConstructors();
        //foreach (var c in availableConstructrors.ToList())
        //    foreach (var constructor in newTeam.Constructors)
        //        if (constructor.ConstructorId == c.ConstructorId)
        //            availableConstructrors.Remove(c);
    }

    public async void OnSubmit()
    {
        newTeam.TeamId = Guid.NewGuid().ToString();
        newTeam.OwnerId = appState.currentUser.UserId;
        newTeam.CreatedDate = DateTime.Now;

        //check if user has a team with that name
        usersOwnedTeams = await teamData.GetAllTeams();
        foreach (var t in usersOwnedTeams)
        {
            if (t.OwnerId != appState.currentUser.UserId)
                usersOwnedTeams.Remove(t);
        }

        foreach (var t in usersOwnedTeams)
        {
            if (t.Name == newTeam.Name)
            {
                nameTaken = true;
                return;
            }
        }

        await teamData.InsertTeam(newTeam);

        //navigate to manage team
        navMan.NavigateTo($"/Fantasy/ManageTeam{newTeam.TeamId}", false);
    }
}

@page "/Fantasy/ManageLeague/{passedLeagueId}"

@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services
@using DataAccess.Models.Fantasy
@using DataAccess.Models

@inject IUserData userData
@inject AppStateService appState
@inject ILeagueData leagueData
@inject ITeamData teamData

<head>
    <title>Manage my league</title>
</head>

@if(_selectedLeague is not null)
{
    @if(_selectedLeague.OwnerId == appState.currentUser.UserId)
    {
        @if(setupDone)
        {
            <h2>Manage My League</h2>
            <h3>@_selectedLeague.Name</h3>

            <table>
                <thead>
                    <tr>
                        <th>Pos.</th>
                        <th>Team</th>
                        <th>Owner</th>
                        <th>Points</th>
                        <th>Remove team</th>
                    </tr>
                </thead>
                <tbody>
                    @for(int i = 0; i < _selectedLeague.Teams.Count; i++)
                    {
                        <tr>
                            <td>@(i+1)</td>
                            <td>@_selectedLeague.Teams[i].Name</td>
                            <td>@GetUsernameOfTeamOwner(_selectedLeague.Teams[i].OwnerId)</td>
                            <td>@_selectedLeague.Teams[i].TotalPoints</td>
                            <td>
                                <a @onclick="@((args) => KickTeam(args, _selectedLeague.Teams[i].TeamId))"><i class="fa-sharp fa-solid fa-user-xmark"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else
    {
        <p>You don't own this league</p>
    }
}
else
{
    <p>Loading...</p>
}



@foreach(FantasyTeamModel team in _teams)
{
    <div class="manage-league-team-control">
        <h4>Team name: @team.Name</h4>
        <p>Team owner: @GetUsernameOfTeamOwner(team.OwnerId)</p>
        <p>Team Value: @team.CurrentTeamValue</p>
        <p>Team Budget remaining: @team.BudgetRemaining</p>
        @if(team.Drivers is not null)
        {
            @foreach(var driver in team.Drivers)
            {
                <p>@driver.DriverId</p>
            }
        }
        <p>Boosted driver: @team.BoostedDriverId</p>
    </div>
}

@code {
    [Parameter]
    public string passedLeagueId { get; set; } = string.Empty;
    bool setupDone = false;
    FantasyLeagueModel? _selectedLeague = null;
    List<FantasyTeamModel> _teams = new();
    List<UserModel> _allUsers = new();

    protected override async Task OnInitializedAsync()
    {
        List<FantasyLeagueModel> allLeagues = new();
        allLeagues = await leagueData.GetAllLeagues();

        if(allLeagues is not null)        
            _selectedLeague = allLeagues.FirstOrDefault(t => t.LeagueId == passedLeagueId);       

        //Get all teams in the league
        _selectedLeague.Teams = await teamData.GetTeamsByLeagueId(passedLeagueId);
        _selectedLeague.Teams.OrderBy(t => t.TotalPoints);
    }

    /// <summary>
    /// Get the user name of the owner of a team
    /// </summary>
    /// <param name="Ownerid"></param>
    /// <returns></returns>
    private string GetUsernameOfTeamOwner(string Ownerid)
    {
        UserModel teamOwner = new();

        foreach(UserModel u in _allUsers)
        {
            if (u.UserId == Ownerid)
                teamOwner = u;
        }
        return teamOwner.Username;
    }

    private void KickTeam(MouseEventArgs args, string teamId)
    {
        if(args is not null)
        {
            _selectedLeague.Teams.RemoveAll(t => t.TeamId == teamId);

            FantasyTeamModel team = new();
            team.TeamId = teamId;
            team.LeagueId = "";

            teamData.UpdateTeamDetails(team);
        }
    }
}

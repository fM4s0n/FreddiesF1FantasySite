@page "/Fantasy/ManageLeague/{passedLeagueId}"

@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services
@using DataAccess.Models.Fantasy
@using DataAccess.Models

@inject IUserData userData
@inject AppStateService appState
@inject ILeagueData leagueData
@inject ITeamData teamData

<head>
    <title>Manage my league</title>
</head>

@if(_setupDone)
{
    @if(_selectedLeague is not null)
    {
        @if(_selectedLeague.OwnerId == appState.currentUser.UserId)
        {
            <h2>Manage My League | @(_selectedLeague.Name) </h2>
            <br />

            <label>League Password</label>
            <input type="password" @bind="_selectedLeague.Password" contenteditable="@passwordEdit"/>
            <i class="fa-sharp fa-solid fa-eye"></i>
            <button @onclick="TogglePasswordEdit">Edit</button>

            <table class="table" style="text-align:center">
                <thead>
                    <tr>
                        <th>Pos.</th>
                        <th>Team</th>
                        <th>Owner</th>
                        <th>Points</th>
                        <th>Remove team</th>
                    </tr>
                </thead>
                <tbody>                    
                    @foreach(FantasyTeamModel team in _selectedLeague.Teams)
                    {
                        <tr>
                            @(pos += 1)

                            <td>@pos</td>
                            <td>@team.Name</td>
                            <td>@GetUsernameOfTeamOwner(team.OwnerId)</td>
                            <td>@team.TotalPoints</td>
                            <td>
                                <i @onclick="@((args) => KickTeam(team.TeamId))" class="fa-sharp fa-solid fa-user-xmark icon-colour" style="cursor:pointer" />
                            </td>
                        </tr>
                    }                    
                </tbody>
            </table>
        }
        else
        {
            <p>You don't own this league</p>
        }
    }
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public string passedLeagueId { get; set; } = string.Empty;
    bool _setupDone = false;
    FantasyLeagueModel? _selectedLeague = null;
    List<FantasyTeamModel> _allTeams = new();
    List<UserModel> _allUsers = new();

    int pos = 0;
    bool passwordEdit = false;


    protected override async Task OnInitializedAsync()
    {
        _allUsers = await userData.GetAllUsers();

        //get list of all leagues
        List<FantasyLeagueModel> allLeagues = new();
        allLeagues = await leagueData.GetAllLeagues();

        //set selected league
        if(allLeagues is not null)        
            _selectedLeague = allLeagues.FirstOrDefault(t => t.LeagueId == passedLeagueId);

        //Get all teams in the league
        _allTeams = await teamData.GetAllTeams();

        //Get all teams that are in this league
        _selectedLeague.Teams = _allTeams.Where(t => t.LeagueId == passedLeagueId).ToList();
        //order by points
        _selectedLeague.Teams.OrderByDescending(t => t.TotalPoints);

        _setupDone = true;
    }

    /// <summary>
    /// Get the user name of the owner of a team
    /// </summary>
    /// <param name="Ownerid"></param>
    /// <returns></returns>
    private string GetUsernameOfTeamOwner(string Ownerid)
    {
        UserModel teamOwner = new();

        foreach(UserModel u in _allUsers)
        {
            if (u.UserId == Ownerid)
                teamOwner = u;
        }
        return teamOwner.Username;
    }

    private void KickTeam(string teamId)
    {
        if(teamId is not null)
        {
            _selectedLeague.Teams.RemoveAll(t => t.TeamId == teamId);

            FantasyTeamModel team = new();
            team.TeamId = teamId;
            team.LeagueId = "";

            teamData.UpdateTeamDetails(team);
        }
    }

    private void TogglePasswordEdit()
    {
        passwordEdit = !passwordEdit;
    }
}

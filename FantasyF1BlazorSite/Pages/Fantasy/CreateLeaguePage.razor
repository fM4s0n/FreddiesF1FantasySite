@page "/Fantasy/CreateLeague"

@using DataAccess.Models.Fantasy
@using DataAccess.Models
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services

@inject ILeagueData leagueData
@inject AppStateService appState
@inject NavigationManager navMan

<h3 style="text-align:center">Create a new Fantasy League</h3>

<form id="create-league">
    <label for="leagueNameInput">League name</label>
    <input type="text" class="create-league-input" @onchange="@((args) => CheckLeagueNameTaken(args))" id="leagueNameInput"/>
    @if(leagueNameTaken)
    {
        <p style="color:red">League name taken, please enter a new name</p>
    }
    <br /><br />

    <label for="requirePasswordCheckbox">Require password?</label>
    <input type="checkbox" id="requirePasswordCheckbox" @bind="_newLeague.RequirePassword"/>
    <p style="font-size:smaller">-Select to require a password when a team enters your league</p>


    @if(_newLeague.RequirePassword)
    {
        <label for="leaguePassword1">League Password</label>
        <input type="password" class="create-league-input" id="leaguePassword1" @bind="password1"></input>
        <br /><br />

        <label for="leaguePassword2">Re-enter League Password</label>
        <input type="password" class="create-league-input" id="leaguePassword2" @bind="password2"></input>
        <br /><br />
    }
    <button type="submit" @onclick="OnSubmit" style="width:20%; float:right">Submit</button>
</form>



@code {
    FantasyLeagueModel _newLeague = new();
    List<FantasyLeagueModel> _allLeagues = new();
    List<string> _allLeagueNames = new();

    string password1 = "";
    string password2 = "";
    bool passwordsDontMatch = false;
    bool leagueNameTaken;

    protected override async void OnInitialized()
    {
        _allLeagues = await leagueData.GetAllLeagues();

        foreach (var league in _allLeagues)
            _allLeagueNames.Add(league.Name);
    }

    private async void OnSubmit()
    {
        _newLeague.LeagueId = Guid.NewGuid().ToString();
        _newLeague.OwnerId = appState.currentUser.UserId;
        _newLeague.CreatedDate = DateTime.Now;

        if (_newLeague.RequirePassword && password1 == password2)        
            _newLeague.Password = password1;        

        if (password1 != password2)        
            passwordsDontMatch = true;        

        await leagueData.InsertLeague(_newLeague);
        navMan.NavigateTo("/Fantasy/Home", true);
    }

    private void CheckLeagueNameTaken(ChangeEventArgs args)
    {
        if (args is not null)
        {
            if(_allLeagueNames.Contains(_newLeague.Name))
            {
                leagueNameTaken = true;
            }
        }
    }
}
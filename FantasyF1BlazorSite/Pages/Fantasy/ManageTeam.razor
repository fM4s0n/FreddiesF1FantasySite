@page "/Fantasy/ManageTeam/{passedTeamId}"

@using DataAccess.Models.Fantasy
@using DataAccess.Models
@using DataAccess.Models.General
@using DataAccess.Dictionaries.Fantasy
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services
@using Newtonsoft.Json

@inject ITeamData teamData
@inject ILeagueData leagueData
@inject IConstructorTeamMembershipData ctmData
@inject IDriverTeamMembershipData dtmData
@inject AppStateService appState
@inject NavigationManager navMan

<head>
    <title>Manage My Team</title>
</head>

@if(_selectedTeam is not null)
{
    @if(_selectedTeam.OwnerId == appState.currentUser.UserId)
    {
        <h2 style="text-align:center">Manage My Team</h2>
        
        <div>
            <label>Team name</label>
            <input type="text" @bind=_selectedTeam.Name/>
            <br/><br />

            <label for="selectConstructor">Select Constructor</label>
            <select id="selectConstructor" @onchange="@((args) => HandleSelectChanged(args, 0))">
                <option disabled selected value="0">-----------------------------------</option>
                @foreach(var c in availableConstructrors)
                {
                    <option value="@c.ConstructorId">@(c.ConstructorName) - £@(c.CurrentValue.ToString("F"))m </option>
                }
            </select>
            <br/>

            <label for="selectDriver1">Select Driver 1</label>
            <select id="selectDriver1" @onchange="@((args) => HandleSelectChanged(args, 1))">
                <option disabled value="0" selected="@(newTeam.Drivers[0].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers1)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[0].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver2">Select Driver 2</label>
            <select id="selectDriver2" @onchange="@((args) => HandleSelectChanged(args, 2))">
                <option disabled value="0" selected="@(newTeam.Drivers[1].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers2)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[1].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 3</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 3))">
                <option disabled value="0" selected="@(newTeam.Drivers[2].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers3)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[2].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 4</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 4))">
                <option disabled value="0" selected="@(newTeam.Drivers[3].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers4)
                {
                    <option value="@d.DriverId" selected="@(newTeam.Drivers[3].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriverBoost">Select Driver to boost</label>
            <select id="selectDriverBoost" @onchange="@((args) => HandleSelectChanged(args, 5))">
                <option disabled value="0" selected="@(newTeam.BoostedDriverId == "")">-----------------------------------</option>
                @foreach(var d in availableDriversToBoost)
                {
                    <option value="@d.DriverId" selected="@(newTeam.BoostedDriverId == d.DriverId)">@d.DriverName</option>
                }
            </select>
            <br /> <br />

            

        </div>

        <div>
            <label>Current Team Value</label>
            <p>@_selectedTeam.CurrentTeamValue</p>

            <label>Purchased Team Value</label>
            <p>@_selectedTeam.PurchasedTeamValue</p>

            <label>Team budget remaining</label>
            <p>@_selectedTeam.BudgetRemaining</p>
        </div>

        <div>
            <p class="@SetBudgetTextColourClass">Team Value: £@(newTeam.CurrentTeamValue.ToString("F"))m</p>
            <p>Budget remaining: £@(newTeam.BudgetRemaining.ToString("F"))m</p> <br />

            <button type="submit" disabled="@(!allChecksPass)" @onclick="OnSubmit">Create Team</button>
        </div>
    }
    else
    {
        <p>not your team! go away</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    //Get teamid of the team being managed
    [Parameter]
    public string passedTeamId { get; set; } = string.Empty;

    FantasyTeamModel? _selectedTeam = null;

    //List of constructors for user to select for their team - get from api
    List<ConstructorStandingsModel.Constructor> constructors = new();
    List<DriverStandingsModel.Driver> drivers = new();

    List<ConstructorTeamMembershipModel> CTMs = new();
    List<DriverTeamMembershipModel> DTMs = new();

    protected override async Task OnInitializedAsync()
    {
        List<FantasyTeamModel> teams = await teamData.GetAllTeams();
        teams = teams.Where(t => t.TeamId == passedTeamId).ToList();
        _selectedTeam = teams[0];

        //fill out calculated properties of the team
        CompleteTeamInfo();

        //fill out the constructors list from thr api
        GetListOfConstructors();
    }

    /// <summary>
    /// Get a list of constructors from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfConstructors()
    {
        var json = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        ConstructorStandingsModel.Root deserialised = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(json);
        @foreach(ConstructorStandingsModel.ConstructorStanding c in deserialised.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
        {
            constructors.Add(c.Constructor);
        }
    }

    /// <summary>
    /// Get a list of drivers from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfDrivers()
    {
        var json = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        DriverStandingsModel.Root deserialised = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(json);
        @foreach(DriverStandingsModel.DriverStandings d in deserialised.MRData.StandingsTable.StandingsLists[0].DriverStandings)
        {
            drivers.Add(d.Driver);
        }
    }


    /// <summary>
    /// Fill out the driver and constructor list properties of the team
    /// </summary>
    private void CompleteTeamInfo()
    {
        //fill out the driver and constructor lists
        _selectedTeam.Drivers = DTMs.Count > 0 ? DTMs : null;
        _selectedTeam.Constructors = CTMs.Count > 0 ? CTMs : null;

        //calculate total team value
        //if(team.Drivers != null)
        //{
        //    foreach (var driver in team.Drivers)            
        //        team.CurrentTeamValue += driver.CurrentValue;
        //}
    }

    /// <summary>
    /// get the drivers which are part of the team
    /// </summary>
    private async void GetTeamDrivers()
    {
        //get all dtms from the db
        DTMs = await dtmData.GetAllDriverTeamMemberships();

        //remove any from the list that aren't from tor team
        foreach(DriverTeamMembershipModel dtm in DTMs)
        {
            if(dtm.TeamId != _selectedTeam.TeamId)
                DTMs.Remove(dtm);
        }
    }

    /// <summary>
    /// get a list of the constructors that are part of the team
    /// </summary>
    private async void GetTeamConstructors()
    {      
        CTMs = await ctmData.GetAllConstructorTeamMemberships();

        foreach(ConstructorTeamMembershipModel ctm in CTMs)
        {
            if(ctm.TeamId != _selectedTeam.TeamId)
                CTMs.Remove(ctm);
        }
    }
}

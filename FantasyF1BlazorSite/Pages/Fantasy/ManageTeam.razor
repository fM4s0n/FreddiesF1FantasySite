@page "/Fantasy/ManageTeam/{passedTeamId}"

@using DataAccess.Models.Fantasy
@using DataAccess.Models
@using DataAccess.Models.General
@using DataAccess.Dictionaries.Fantasy
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services
@using Newtonsoft.Json

@inject ITeamData teamData
@inject ILeagueData leagueData
@inject IConstructorTeamMembershipData ctmData
@inject IDriverTeamMembershipData dtmData
@inject AppStateService appState
@inject NavigationManager navMan

<head>
    <title>Manage My Team</title>
</head>

@if(_selectedTeam is not null)
{
    @if(_selectedTeam.OwnerId == appState.currentUser.UserId)
    {
        <h2 style="text-align:center">Manage My Team</h2>
        
        <div>
            <label>Team name</label>
            <input type="text" @bind=_selectedTeam.Name/>
            <br/><br />

            <label for="selectConstructor">Select Constructor</label>
            <select id="selectConstructor" @onchange="@((args) => HandleSelectChanged(args, 0))">
                <option disabled selected value="0">-----------------------------------</option>
                @foreach(var c in availableConstructrors)
                {
                    <option value="@c.ConstructorId">@(c.ConstructorName) - £@(c.CurrentValue.ToString("F"))m </option>
                }
            </select>
            <br/>

            <label for="selectDriver1">Select Driver 1</label>
            <select id="selectDriver1" @onchange="@((args) => HandleSelectChanged(args, 1))">
                <option disabled value="0" selected="@(_selectedTeam.Drivers[0].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers1)
                {
                    <option value="@d.DriverId" selected="@(_selectedTeam.Drivers[0].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver2">Select Driver 2</label>
            <select id="selectDriver2" @onchange="@((args) => HandleSelectChanged(args, 2))">
                <option disabled value="0" selected="@(_selectedTeam.Drivers[1].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers2)
                {
                    <option value="@d.DriverId" selected="@(_selectedTeam.Drivers[1].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 3</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 3))">
                <option disabled value="0" selected="@(_selectedTeam.Drivers[2].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers3)
                {
                    <option value="@d.DriverId" selected="@(_selectedTeam.Drivers[2].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriver3">Select Driver 4</label>
            <select id="selectDriver3" @onchange="@((args) => HandleSelectChanged(args, 4))">
                <option disabled value="0" selected="@(_selectedTeam.Drivers[3].DriverId == "0")">-----------------------------------</option>
                @foreach(var d in availableDrivers4)
                {
                    <option value="@d.DriverId" selected="@(_selectedTeam.Drivers[3].DriverId == d.DriverId)">@d.DriverName - £@(d.CurrentValue.ToString("F"))m</option>
                }
            </select>
            <br />

            <label for="selectDriverBoost">Select Driver to boost</label>
            <select id="selectDriverBoost" @onchange="@((args) => HandleSelectChanged(args, 5))">
                <option disabled value="0" selected="@(newTeam.BoostedDriverId == "")">-----------------------------------</option>
                @foreach(var d in availableDriversToBoost)
                {
                    <option value="@d.DriverId" selected="@(_selectedTeam.BoostedDriverId == d.DriverId)">@d.DriverName</option>
                }
            </select>
            <br /> <br />

            

        </div>

        <div>
            <label>Current Team Value</label>
            <p>@_selectedTeam.CurrentTeamValue</p>

            <label>Purchased Team Value</label>
            <p>@_selectedTeam.PurchasedTeamValue</p>

            <label>Team budget remaining</label>
            <p>@_selectedTeam.BudgetRemaining</p>
        </div>

        <div>
            <p class="@SetBudgetTextColourClass">Team Value: £@(_selectedTeam.CurrentTeamValue.ToString("F"))m</p>
            <p>Budget remaining: £@(_selectedTeam.BudgetRemaining.ToString("F"))m</p> <br />

            <button type="submit" disabled="@(!allChecksPass)" @onclick="OnSubmit">Create Team</button>
        </div>
    }
    else
    {
        <p>not your team! go away</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    //Get teamid of the team being managed
    [Parameter]
    public string _passedTeamId { get; set; } = string.Empty;

    private string ColourCode { get; set; } = "";
    bool allChecksPass = false;

    FantasyTeamModel? _selectedTeam = null;

    //lists of drivers and constructors to choose from
    List<ConstructorTeamMembershipModel> availableConstructrors = new();
    List<DriverTeamMembershipModel> availableDrivers1 = new();
    List<DriverTeamMembershipModel> availableDrivers2 = new();
    List<DriverTeamMembershipModel> availableDrivers3 = new();
    List<DriverTeamMembershipModel> availableDrivers4 = new();

    protected override async Task OnInitializedAsync()
    {
        List<FantasyTeamModel> teams = await teamData.GetAllTeams();
        teams = teams.Where(t => t.TeamId == _passedTeamId).ToList();
        _selectedTeam = teams[0];

        //fill out calculated properties of the team
        CompleteTeamInfo();

        //fill out the constructors list from thr api
        GetListOfConstructors();
    }

    /// <summary>
    /// Get a list of constructors from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfConstructors()
    {
        var json = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        ConstructorStandingsModel.Root deserialised = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(json);
        foreach(ConstructorStandingsModel.ConstructorStanding c in deserialised.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
        {
            ConstructorTeamMembershipModel con = new();
            con.ConstructorId = c.Constructor.ConstructorId;

            availableConstructrors.Add(con);
        }
        availableConstructrors = availableConstructrors.OrderByDescending(t => t.CurrentValue).ToList();
    }

    /// <summary>
    /// Get a list of drivers from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfDrivers()
    {
        var json = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        DriverStandingsModel.Root deserialised = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(json);
        foreach(DriverStandingsModel.DriverStandings d in deserialised.MRData.StandingsTable.StandingsLists[0].DriverStandings)
        {
            DriverTeamMembershipModel dri = new();
            dri.DriverId = d.Driver.DriverId;

            availableDrivers1.Add(dri);
            availableDrivers2.Add(dri);
            availableDrivers3.Add(dri);
            availableDrivers4.Add(dri);           
        }
        //order lists by driver value
        availableDrivers1 = availableDrivers1.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers2 = availableDrivers2.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers3 = availableDrivers3.OrderByDescending(t => t.CurrentValue).ToList();
        availableDrivers4 = availableDrivers4.OrderByDescending(t => t.CurrentValue).ToList();
    }


    /// <summary>
    /// Fill out the driver and constructor list properties of the team
    /// </summary>
    private void CompleteTeamInfo()
    {
        //fill out the driver and constructor lists
        _selectedTeam.Drivers = DTMs.Count > 0 ? DTMs : null;
        _selectedTeam.Constructors = CTMs.Count > 0 ? CTMs : null;


    }

    /// <summary>
    /// When on changed is invoked, set the selected driver and refresh the lists
    /// </summary>
    /// <param name="args">value of the select item that has been changed</param>
    /// <param name="selectNumber">select item changed by the user</param>
    /// <returns></returns>
    private void HandleSelectChanged(ChangeEventArgs args, int selectNumber)
    {
        if(args.Value is not null)
        {
            //if constructor select box selected
            if(selectNumber == 0)
                _selectedTeam.Constructors[0].ConstructorId = args.Value.ToString();
            else if(selectNumber > 0 && selectNumber < 5)
            {   //depending on the select box chosen, remove the selected driver from each of the other boxes so they can't be selected again
                if(selectNumber == 1)
                {
                    //if a driver is already in the slot we are about to put one in, we need to add that driveer back into the other lists
                    if(_selectedTeam.Drivers[0].DriverId != "0")
                    {
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[0].DriverId });
                    }

                    //remove from all lists except the one the driver has just been selected in
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 2)
                {
                    if(_selectedTeam.Drivers[1].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[1].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 3)
                {
                    if(_selectedTeam.Drivers[2].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                        availableDrivers4.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[2].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers4.RemoveAll(s => s.DriverId == args.Value.ToString());
                }

                if(selectNumber == 4)
                {
                    if(_selectedTeam.Drivers[3].DriverId != "0")
                    {
                        availableDrivers1.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                        availableDrivers2.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                        availableDrivers3.Add(new DriverTeamMembershipModel { DriverId = newTeam.Drivers[3].DriverId });
                    }

                    availableDrivers1.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers2.RemoveAll(s => s.DriverId == args.Value.ToString());
                    availableDrivers3.RemoveAll(s => s.DriverId == args.Value.ToString());
                }
                //add the selected driver to the team in the relevent index
                _selectedTeam.Drivers[selectNumber - 1].DriverId = args.Value.ToString();
                //add the selected driver to the available drivers to boost
                availableDriversToBoost[selectNumber - 1].DriverId = (args.Value.ToString());

                //re order the lists by value
                availableDrivers1 = availableDrivers1.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers2 = availableDrivers2.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers3 = availableDrivers3.OrderByDescending(t => t.CurrentValue).ToList();
                availableDrivers4 = availableDrivers4.OrderByDescending(t => t.CurrentValue).ToList();
            }
            else
            {
                //if 5 is selected, they are updating their boosted driver
                if(selectNumber == 5)
                {
                    _selectedTeam.BoostedDriverId = args.Value.ToString();
                }
            }
            //calc budget remaining
            _selectedTeam.BudgetRemaining = 100 - _selectedTeam.CurrentTeamValue;

            CheckInputs();
        }
    }

    private void CheckInputs()
    {
        if(_selectedTeam.Name != "" && _selectedTeam.CurrentTeamValue <= 100 && _selectedTeam.Constructors.All(t => t.ConstructorId != "0") && _selectedTeam.Drivers.All(t => t.DriverId != "0") && usersOwnedTeams.All(r => r.Name != _selectedTeam.Name))
        {
            allChecksPass = true;
        }
    }

    private void SetBudgetTextColourClass()
    {
        if(_selectedTeam.CurrentTeamValue < 100)
        {
            ColourCode = "black-Text-Class";
        }

        if(_selectedTeam.CurrentTeamValue == 100)
        {
            ColourCode = "green-Text-Class";
        }

        if(_selectedTeam.CurrentTeamValue > 100)
        {
            ColourCode = "red-Text-Class";
        }
    }
}

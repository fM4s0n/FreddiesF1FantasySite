@page "/Fantasy/ManageTeam/{passedTeamId}"

@using DataAccess.Models.Fantasy
@using DataAccess.Models
@using DataAccess.Models.General
@using DataAccess.Dictionaries.Fantasy
@using DataAccess.Database
@using DataAccess.API
@using DataAccess.Services
@using Newtonsoft.Json

@inject ITeamData teamData
@inject IConstructorTeamMembershipData ctmData
@inject IDriverTeamMembershipData dtmData
@inject AppStateService appState
@inject NavigationManager navMan

@if(team is not null)
{
    @if(team.OwnerId == appState.currentUser.UserId)
    {
        <h2 style="text-align:center">Manage Team</h2>
        
        <div>
            <label>Team name</label>
            <input type="text" @bind=team.Name/>
            <br/><br />

            <label>Current Team Value</label>
            <p>@team.CurrentTeamValue</p>

            <label>Purchased Team Value</label>
            <p>@team.PurchasedTeamValue</p>

            <label>Team budget remaining</label>
            <p>@team.BudgetRemaining</p>

            <label>Constructor</label>
            @if(team.Constructors.Count > 1)
            {
                <table>
                    <thead>
                        <tr>
                            <th>Constructor</th>
                            <th>Points scored</th>
                            <th>Current Value</th>
                            <th>Purchased Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(ConstructorTeamMembershipModel ctm in team.Constructors)
                        {
                            <tr>
                                <td>@ctm.ConstructorName</td>
                                <td>@ctm.PointsScored</td>
                                <td>£@(ctm.CurrentValue)m</td>
                                <td>£@(ctm.PurchasedValue)m</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }


            @*<select>
                @foreach(var constructor in constructors)
                {
                    <option value="@constructor.ConstructorId" selected="@(constructor.ConstructorId == team.Constructors[0].ConstructorId)">@constructor.Name - @ConstructorValueDictionary.GetCurrentValue(constructor.ConstructorId)m</option>
                }
            </select>*@

            <label>Drivers</label>
            @if(team.Drivers.Count > 1)
            {
                <table>
                    <thead>
                        <tr>
                            <th>Constructor</th>
                            <th>Points scored</th>
                            <th>Current Value</th>
                            <th>Purchased Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(DriverTeamMembershipModel dtm in team.Drivers)
                        {
                            <tr>
                                <td>@dtm.DriverName</td>
                                <td>@dtm.PointsScored</td>
                                <td>£@(dtm.CurrentValue)m</td>
                                <td>£@(dtm.PurchasedValue)m</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    }
    else
    {
        <p>not your team! go away</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    //Get teamid of the team being managed
    [Parameter]
    public string passedTeamId { get; set; } = string.Empty;

    FantasyTeamModel team = new();

    //List of constructors for user to select for their team - get from api
    List<ConstructorStandingsModel.Constructor> constructors = new();
    List<DriverStandingsModel.Driver> drivers = new();

    List<ConstructorTeamMembershipModel> CTMs = new();
    List<DriverTeamMembershipModel> DTMs = new();

    protected override async Task OnInitializedAsync()
    {
        List<FantasyTeamModel> teams = await teamData.GetTeamsByLeagueId(passedTeamId);
        team = teams[0];

        //fill out calculated properties of the team
        CompleteTeamInfo();

        //fill out the constructors list from thr api
        GetListOfConstructors();
    }

    /// <summary>
    /// Get a list of constructors from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfConstructors()
    {
        var json = await ApiService.GetConstructorStandingsAsync(DateTime.Now.Year.ToString());
        ConstructorStandingsModel.Root deserialised = JsonConvert.DeserializeObject<ConstructorStandingsModel.Root>(json);
        @foreach(ConstructorStandingsModel.ConstructorStanding c in deserialised.MRData.StandingsTable.StandingsLists[0].ConstructorStandings)
        {
            constructors.Add(c.Constructor);
        }
    }

    /// <summary>
    /// Get a list of drivers from the API that a user can choose from for their team
    /// </summary>
    private async void GetListOfDrivers()
    {
        var json = await ApiService.GetDriverStandingsAsync(DateTime.Now.Year.ToString());
        DriverStandingsModel.Root deserialised = JsonConvert.DeserializeObject<DriverStandingsModel.Root>(json);
        @foreach(DriverStandingsModel.DriverStandings d in deserialised.MRData.StandingsTable.StandingsLists[0].DriverStandings)
        {
            drivers.Add(d.Driver);
        }
    }


    /// <summary>
    /// Fill out the driver and constructor list properties of the team
    /// </summary>
    private void CompleteTeamInfo()
    {
        //fill out the driver and constructor lists
        team.Drivers = DTMs.Count > 0 ? DTMs : null;
        team.Constructors = CTMs.Count > 0 ? CTMs : null;

        //calculate total team value
        //if(team.Drivers != null)
        //{
        //    foreach (var driver in team.Drivers)            
        //        team.CurrentTeamValue += driver.CurrentValue;
        //}
    }

    /// <summary>
    /// get the drivers which are part of the team
    /// </summary>
    private async void GetTeamDrivers()
    {
        //get all dtms from the db
        DTMs = await dtmData.GetAllDriverTeamMemberships();

        //remove any from the list that aren't from tor team
        foreach(DriverTeamMembershipModel dtm in DTMs)
        {
            if(dtm.TeamId != team.TeamId)
                DTMs.Remove(dtm);
        }
    }

    /// <summary>
    /// get a list of the constructors that are part of the team
    /// </summary>
    private async void GetTeamConstructors()
    {      
        CTMs = await ctmData.GetAllConstructorTeamMemberships();

        foreach(ConstructorTeamMembershipModel ctm in CTMs)
        {
            if(ctm.TeamId != team.TeamId)
                CTMs.Remove(ctm);
        }
    }
}

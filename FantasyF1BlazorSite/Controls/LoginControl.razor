@using DataAccess.Services
@using DataAccess.Models
@using DataAccess.Database
@using Microsoft.AspNetCore.Identity;

@inject AppStateService appState
@inject NavigationManager navMan
@inject IUserData userData

<head>
    <title>Login</title>
</head>


<form id="login">
    <h1 style="text-align:center">Please login</h1>

    <label for="username">Username:</label>
    <br />
    <input type="text" class="login-input" name="Username" id="username" placeholder="Username" @bind="usernameInputText" />
    <br /> <br />
    <label for="password">Password:</label>
    <br />
    <input type="password" class="login-input" name="Password" id="password" placeholder="Password" @bind="passwordInputText" />

    @if (loginFailed)
    {
        <p style ="color:red">Login attempt failed, check username and password and try again</p>
    }

    @if(loginIncomplete)
    {
        <p style="color:red">Please eneter a username and password</p>
    }

    <a href="/Account/Create" style="float:right"> Don't have an account? Sign up here!</a>
    <br /><br />
</form>


<div style="width:100%;">
    <button type="submit" id="submit" class="btn btn-primary" @onclick="CheckLogin">Log in</button>
    <br />
</div>

@code {
    PasswordHasher<UserModel> passwordHasher = new();
    string usernameInputText = "";
    string passwordInputText = "";
    bool loginFailed = false;
    bool loginIncomplete = false;

    /// <summary>
    /// Check if the login details are accurate
    /// Update login state if passes check
    /// </summary>
    private async void CheckLogin ()
    {
        @if(string.IsNullOrWhiteSpace(usernameInputText) || string.IsNullOrWhiteSpace(passwordInputText))
        {
            loginIncomplete = true;
            return;
        }

        List<UserModel> users = new();
        users = await userData.GetAllUsers();


        if (users.Count > 0)
        {
            foreach (UserModel u in users)
            {
                if (usernameInputText == u.Username)
                {
                    UserModel user = u;
                    string hashedPassword = HashPassword(user);

                    if (CheckPassword(user, hashedPassword, passwordInputText) == PasswordVerificationResult.Success)
                    {
                        appState.LogIn(u);
                        navMan.NavigateTo("/", true);
                    }
                    else
                        loginFailed = true;
                }
                else
                    loginFailed = true;                
            }
        }
    }

    private PasswordVerificationResult CheckPassword(UserModel user, string hashedPassword, string providedPassword)
    {
        return passwordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);
    }

    private string HashPassword(UserModel user)
    {
        return passwordHasher.HashPassword(user, passwordInputText);
    }
}
